// Vylep≈°en√° AI anal√Ωza s konkr√©tn√≠m √∫ƒçtov√°n√≠m
const analyzeDocument = async (ocrText: string): Promise<any> => {
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [{
          role: 'user',
          content: `√öKOL: Jako expert na ƒçesk√© √∫ƒçetnictv√≠ analyzuj dokument a navrhni KONKR√âTN√ç √∫ƒçtov√°n√≠.

DOKUMENT:
${ocrText}

ODPOVƒöZ POUZE JSON (≈æ√°dn√Ω jin√Ω text):
{
  "typ": "faktura_prijata",
  "dodavatel": "ACME s.r.o.",
  "castka": "15125 Kƒç",
  "datum": "24.06.2025",
  "cisloDokladu": "2025-001",
  "popis": "Slu≈æby - konzultace",
  "dph": "2625 Kƒç",
  "ucty": "MD 518010 (Slu≈æby) / DA 321000 (Dodavatel√©)",
  "confidence": 0.95,
  "zduvodneni": "P≈ôijat√° faktura za slu≈æby - standardn√≠ √∫ƒçtov√°n√≠ dle ƒå√öS"
}

TYPY DOKUMENT≈Æ:
- faktura_prijata: MD 518xxx (dle druhu slu≈æby) / DA 321xxx (Dodavatel√©)
- faktura_vystavena: MD 311xxx (Odbƒõratel√©) / DA 601xxx (Tr≈æby)
- pokladni_doklad: MD 501xxx (Spot≈ôeba) / DA 211xxx (Pokladna)
- dodaci_list: MD 132xxx (Zbo≈æ√≠) / DA 321xxx (Dodavatel√©)
- vratka: MD 321xxx (Dodavatel√©) / DA 132xxx (Zbo≈æ√≠)
- banka_vypis: MD 221xxx (Banka) / DA dle √∫ƒçelu

PRAVIDLA:
1. V≈ΩDY navrhni konkr√©tn√≠ MD/DA √∫ƒçty s ƒç√≠sly
2. Pro slu≈æby pou≈æij √∫ƒçet 518xxx
3. Pro zbo≈æ√≠ pou≈æij √∫ƒçet 132xxx  
4. Pro tr≈æby pou≈æij √∫ƒçet 601xxx
5. NEPI≈† "vy≈æaduje konzultaci" - navrhni konkr√©tn√≠ ≈ôe≈°en√≠
6. Confidence 0.9+ pro jasn√© p≈ô√≠pady, 0.7+ pro slo≈æitƒõj≈°√≠

VRA≈§ POUZE JSON!`
        }]
      })
    })

    const data = await response.json()
    const aiResponse = data.response || data.message || ''
    
    console.log('ü§ñ AI Response:', aiResponse)
    
    // Robustn√≠ parsing (stejn√© metody jako p≈ôedt√≠m)
    let parsedResult = null
    
    // Pokus 1: ƒåist√Ω JSON
    try {
      parsedResult = JSON.parse(aiResponse)
      console.log('‚úÖ JSON parsing √∫spƒõ≈°n√Ω')
    } catch (e) {
      console.log('‚ö†Ô∏è JSON parsing failed, trying extraction...')
    }
    
    // Pokus 2: Naj√≠t JSON v textu
    if (!parsedResult) {
      try {
        const jsonMatch = aiResponse.match(/\{[\s\S]*?\}/g)
        if (jsonMatch && jsonMatch.length > 0) {
          parsedResult = JSON.parse(jsonMatch[0])
          console.log('‚úÖ JSON extraction √∫spƒõ≈°n√Ω')
        }
      } catch (e) {
        console.log('‚ö†Ô∏è JSON extraction failed, trying manual...')
      }
    }
    
    // Pokus 3: Manu√°ln√≠ extrakce s konkr√©tn√≠m √∫ƒçtov√°n√≠m
    if (!parsedResult) {
      const lines = aiResponse.split('\n')
      const result: any = {
        confidence: 0.7
      }
      
      // Rozpozn√°n√≠ typu dokumentu
      const fullText = (aiResponse + ' ' + ocrText).toLowerCase()
      
      if (fullText.includes('faktura')) {
        if (fullText.includes('p≈ôijat') || fullText.includes('dodavatel')) {
          result.typ = 'faktura_prijata'
          result.ucty = 'MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)'
        } else {
          result.typ = 'faktura_vystavena' 
          result.ucty = 'MD 311000 (Odbƒõratel√©) / DA 601000 (Tr≈æby za slu≈æby)'
        }
      } else if (fullText.includes('pokladn')) {
        result.typ = 'pokladni_doklad'
        result.ucty = 'MD 501000 (Spot≈ôeba materi√°lu) / DA 211000 (Pokladna)'
      } else if (fullText.includes('dodac')) {
        result.typ = 'dodaci_list'
        result.ucty = 'MD 132000 (Zbo≈æ√≠ na skladƒõ) / DA 321000 (Dodavatel√©)'
      } else if (fullText.includes('vratk') || fullText.includes('dobrop')) {
        result.typ = 'vratka'
        result.ucty = 'MD 321000 (Dodavatel√©) / DA 132000 (Zbo≈æ√≠ na skladƒõ)'
      } else if (fullText.includes('bank') || fullText.includes('v√Ωpis')) {
        result.typ = 'banka_vypis'
        result.ucty = 'MD 221000 (Bankovn√≠ √∫ƒçty) / DA dle √∫ƒçelu platby'
      } else {
        result.typ = 'faktura_prijata' // default
        result.ucty = 'MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)'
      }
      
      // Extrakce dal≈°√≠ch √∫daj≈Ø
      for (const line of lines) {
        if (line.includes('Kƒç') || line.includes('CZK')) {
          const amountMatch = line.match(/(\d+[\s,\.]*\d*)\s*(Kƒç|CZK)/)
          if (amountMatch) result.castka = amountMatch[0]
        }
        
        if (line.match(/\d{1,2}\.\d{1,2}\.\d{4}/)) {
          const dateMatch = line.match(/\d{1,2}\.\d{1,2}\.\d{4}/)
          if (dateMatch) result.datum = dateMatch[0]
        }

        if (line.toLowerCase().includes('dodavatel') || line.toLowerCase().includes('firma')) {
          const supplierMatch = line.match(/:\s*([^,\n]+)/)
          if (supplierMatch) result.dodavatel = supplierMatch[1].trim()
        }
      }
      
      // Doplnƒõn√≠ v√Ωchoz√≠ch hodnot
      result.dodavatel = result.dodavatel || "Rozpozn√°no z dokumentu"
      result.popis = result.popis || "√öƒçetn√≠ doklad"
      result.zduvodneni = `Automatick√© rozpozn√°n√≠ typu ${result.typ} s doporuƒçen√Ωm √∫ƒçtov√°n√≠m`
      
      parsedResult = result
      console.log('‚úÖ Manual extraction dokonƒçen')
    }

    // Pokus 4: √öpln√Ω fallback s konkr√©tn√≠m √∫ƒçtov√°n√≠m
    if (!parsedResult) {
      parsedResult = {
        typ: "faktura_prijata",
        dodavatel: "Nerozpozn√°no",
        castka: "Dle dokumentu",
        datum: new Date().toLocaleDateString('cs-CZ'),
        cisloDokladu: "Nerozpozn√°no",
        popis: "√öƒçetn√≠ doklad",
        dph: "Dle dokumentu",
        ucty: "MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)",
        confidence: 0.4,
        zduvodneni: "Fallback - p≈ôijat√° faktura za slu≈æby"
      }
      console.log('‚ö†Ô∏è Pou≈æ√≠v√°m fallback ≈ôe≈°en√≠')
    }

    // Zajistit ≈æe m√°me v≈ædy konkr√©tn√≠ √∫ƒçtov√°n√≠
    if (parsedResult.ucty && parsedResult.ucty.includes('konzultaci')) {
      switch (parsedResult.typ) {
        case 'faktura_prijata':
          parsedResult.ucty = 'MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)'
          break
        case 'faktura_vystavena':
          parsedResult.ucty = 'MD 311000 (Odbƒõratel√©) / DA 601000 (Tr≈æby za slu≈æby)'
          break
        case 'pokladni_doklad':
          parsedResult.ucty = 'MD 501000 (Spot≈ôeba materi√°lu) / DA 211000 (Pokladna)'
          break
        default:
          parsedResult.ucty = 'MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)'
      }
      parsedResult.zduvodneni = 'Automaticky upraveno na konkr√©tn√≠ √∫ƒçtov√°n√≠'
    }

    console.log('üéØ Fin√°ln√≠ v√Ωsledek:', parsedResult)
    return parsedResult

  } catch (error) {
    console.error('‚ùå AI analysis error:', error)
    return {
      typ: "faktura_prijata",
      dodavatel: "Chyba p≈ôi anal√Ωze",
      castka: "Nerozpozn√°no",
      datum: new Date().toLocaleDateString('cs-CZ'),
      popis: "Vy≈æaduje ruƒçn√≠ kontrolu",
      ucty: "MD 518000 (Ostatn√≠ slu≈æby) / DA 321000 (Dodavatel√©)",
      confidence: 0.2,
      zduvodneni: "Chyba p≈ôi AI anal√Ωze - pou≈æito v√Ωchoz√≠ √∫ƒçtov√°n√≠"
    }
  }
}
