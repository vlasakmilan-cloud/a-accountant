import { NextRequest, NextResponse } from 'next/server'
import pdf from 'pdf-parse'

export async function POST(request: NextRequest) {
  let fileName = 'unknown.pdf' // Default value for error handling
  
  try {
    console.log('üöÄ Starting PDF processing API...')
    
    const body = await request.json()
    const { fileName: bodyFileName, fileData, fileSize } = body
    
    // Set fileName for use throughout the function
    fileName = bodyFileName || 'unknown.pdf'

    console.log(`üìÑ Processing PDF: ${fileName} (${fileSize} bytes)`)

    if (!fileData) {
      console.error('‚ùå Missing PDF data')
      return NextResponse.json(
        { error: 'Chyb√≠ PDF data' },
        { status: 400 }
      )
    }

    // Kontrola velikosti souboru
    if (fileSize > 50 * 1024 * 1024) {
      console.error('‚ùå PDF too large')
      return NextResponse.json(
        { error: 'PDF soubor je p≈ô√≠li≈° velk√Ω (maximum 50 MB)' },
        { status: 400 }
      )
    }

    try {
      console.log('üîç Converting base64 to buffer...')
      
      // P≈ôevod base64 na buffer
      const buffer = Buffer.from(fileData, 'base64')
      console.log(`üì¶ Buffer size: ${buffer.length} bytes`)

      console.log('üìñ Parsing PDF content...')
      
      // Zpracov√°n√≠ PDF pomoc√≠ pdf-parse
      const pdfData = await pdf(buffer, {
        // Mo≈ænosti pro lep≈°√≠ zpracov√°n√≠
        max: 0, // ≈æ√°dn√Ω limit str√°nek
        version: 'v1.10.100' // pou≈æ√≠t nejnovƒõj≈°√≠ verzi
      })

      console.log(`üìÑ PDF parsed successfully:`)
      console.log(`   - Pages: ${pdfData.numpages}`)
      console.log(`   - Text length: ${pdfData.text.length}`)
      console.log(`   - Info:`, pdfData.info)

      // Vyƒçistit a form√°tovat text
      let cleanText = pdfData.text
        .replace(/\s+/g, ' ') // nahradit v√≠ce mezer jednou
        .replace(/\n\s*\n/g, '\n') // odstranit pr√°zdn√© ≈ô√°dky
        .trim()

      // Pokud je text pr√°zdn√Ω
      if (!cleanText || cleanText.length < 10) {
        console.warn('‚ö†Ô∏è PDF text is empty or too short')
        return NextResponse.json({
          content: `PDF DOKUMENT: ${fileName}
Str√°nek: ${pdfData.numpages}
Status: PDF √∫spƒõ≈°nƒõ naƒçteno, ale neobsahuje rozpoznateln√Ω text

MO≈ΩN√â P≈ò√çƒåINY:
- PDF obsahuje pouze obr√°zky (skenovan√Ω dokument)
- PDF je chr√°nƒõno proti kop√≠rov√°n√≠
- Text je v grafick√© podobƒõ

DOPORUƒåEN√ç:
1. Zkuste otev≈ô√≠t PDF v prohl√≠≈æeƒçi a zkop√≠rovat text ruƒçnƒõ
2. Nebo p≈ôeveƒète PDF na obr√°zek a pou≈æijte OCR (p≈ôipravujeme)
3. P≈ô√≠padnƒõ po≈æ√°dejte o textovou verzi dokumentu

AI m≈Ø≈æe st√°le analyzovat metadata a n√°zev souboru pro z√°kladn√≠ detekci.`,
          metadata: {
            pages: pdfData.numpages,
            info: pdfData.info,
            hasText: false
          }
        })
      }

      // P≈ôidat metadata k textu
      const result = `PDF DOKUMENT AUTOMATICKY P≈òEƒåTEN: ${fileName}
Str√°nek: ${pdfData.numpages}
Datum zpracov√°n√≠: ${new Date().toLocaleDateString('cs-CZ')}

‚úÖ TEXT OBSAHU AUTOMATICKY EXTRAHOV√ÅN:

${cleanText}

---
METADATA:
${JSON.stringify(pdfData.info, null, 2)}`

      console.log('‚úÖ PDF processing completed successfully')
      
      return NextResponse.json({
        content: result,
        metadata: {
          pages: pdfData.numpages,
          info: pdfData.info,
          textLength: cleanText.length,
          hasText: true
        }
      })

    } catch (pdfError) {
      console.error('‚ùå PDF parsing error:', pdfError)
      
      // Detailn√≠ error handling pro r≈Øzn√© typy chyb
      let errorMessage = 'Nezn√°m√° chyba p≈ôi zpracov√°n√≠ PDF'
      
      if (String(pdfError).includes('Invalid PDF')) {
        errorMessage = 'Soubor nen√≠ platn√Ω PDF dokument'
      } else if (String(pdfError).includes('password')) {
        errorMessage = 'PDF je chr√°nƒõno heslem'
      } else if (String(pdfError).includes('encrypted')) {
        errorMessage = 'PDF je za≈°ifrov√°no a nelze jej p≈ôeƒç√≠st'
      } else if (String(pdfError).includes('damaged')) {
        errorMessage = 'PDF soubor je po≈°kozen√Ω'
      }

      return NextResponse.json({
        error: errorMessage,
        content: `PDF CHYBA: ${fileName}

‚ùå CHYBA P≈òI AUTOMATICK√âM ƒåTEN√ç: ${errorMessage}

üîß MO≈ΩN√Å ≈òE≈†EN√ç:
1. Zkontrolujte, zda je soubor skuteƒçnƒõ PDF
2. Pokud je PDF chr√°nƒõno heslem, odemknƒõte ho
3. Zkuste otev≈ô√≠t PDF v prohl√≠≈æeƒçi:
   - Ctrl+A (oznaƒçit v≈°e)
   - Ctrl+C (kop√≠rovat)
   - Vytvo≈ôte textov√Ω soubor a vlo≈æte obsah
   - Nahrajte textov√Ω soubor pro anal√Ωzu

‚ö° RYCHL√â ≈òE≈†EN√ç:
Otev≈ôete PDF ‚Üí oznaƒçte text ‚Üí zkop√≠rujte ‚Üí vytvo≈ôte .txt soubor ‚Üí nahrajte

üöÄ P≈òIPRAVUJEME: Pokroƒçil√© OCR ƒçten√≠ pro problematick√© PDF soubory`,
        fallback: true
      }, { status: 200 }) // Vrac√≠me 200, proto≈æe m√°me fallback ≈ôe≈°en√≠
    }

  } catch (error) {
    console.error('‚ùå Complete PDF API error:', error)
    
    return NextResponse.json({
      error: 'Syst√©mov√° chyba PDF API',
      content: `SYST√âMOV√Å CHYBA: ${fileName}

‚ùå Chyba: ${String(error)}

üîß ≈òE≈†EN√ç:
1. Zkuste soubor nahr√°t znovu
2. Zkontrolujte p≈ôipojen√≠ k internetu
3. P≈ô√≠padnƒõ pou≈æijte textov√Ω form√°t (.txt)

‚ö° RYCHL√â ≈òE≈†EN√ç:
PDF ‚Üí otev≈ô√≠t ‚Üí oznaƒçit text ‚Üí kop√≠rovat ‚Üí .txt soubor ‚Üí nahr√°t`,
      fallback: true
    }, { status: 500 })
  }
}
